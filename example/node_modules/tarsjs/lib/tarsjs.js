var express = require('express');
var fs = require('fs');
var handlebarsBase = require('./base/handlebars.base').HandlebarsBase;
var path = require('path');
exports = module.exports = createApplication;

/**
 * Create an express application.
 *
 * @return {Function}
 * @api public
 */

function createApplication() {
  

	
	var tarsjs = {}; 
	tarsjs.express = express();

	tarsjs.express.set('views', path.join(__dirname, '../../../views'));
	tarsjs.express.engine('html', handlebarsBase.initHandlebars(tarsjs.express));
	tarsjs.express.set('view engine', 'html');
    tarsjs.express.use(express.static(path.join(__dirname, '../../../public')));

	tarsjs.registerRoute = registerRoute;
	tarsjs.loadRessources = loadRessources;

    tarsjs.loadRessources("controllers", tarsjs);
    tarsjs.loadRessources("models", tarsjs);

    tarsjs.listen = function(param1, param2){ return tarsjs.express.listen(param1, param2); };

  	return tarsjs;
}

function loadRessources(baseName, tarsjs){
	var path = __dirname+"../../../../"+baseName+"/";
	var filenames = fs.readdirSync(path);
	var context = this;
	context[baseName] = [];

	for (var i = filenames.length - 1; i >= 0; i--) {
		loadedElement = require(path+filenames[i])[baseName];
		//loadedElement = preloadMethods(loadedElement);
		var elementName = filenames[i].split('.')[0];
		context[baseName][elementName] = loadExtension(baseName, elementName, loadedElement, tarsjs);
	};

	return "ok";
}

function loadExtension(baseName, elementName, element, tarsjs){
	var test = "C:\\Users\\Florian\\Documents\\GitHub\\TarsJS\\example\\node_modules\\tarsjs\\lib\\base\\";
	var base = require(test+baseName+".base.js").base;
	for(var attr in base) {
		element[attr] = base[attr];
	}

	//more sugar
	element.app = tarsjs;
	element.context = {};
	element.context.name = elementName;

	return element;
}


function registerRoute(options){
	function preloadMethod(req, res, next){
		options.controller.context.req = req;
		options.controller.context.res = res;
		for(var attr in options.controller){
			if(options.controller[attr] === options.action){
				options.controller.context.action = attr;
			}
		}
		next();
	}
	this.express[options.method.toLowerCase()](options.url, preloadMethod);

	return this.express[options.method.toLowerCase()](options.url, options.action);
}




